import { Session } from "./session";
import { Configuration } from "./configuration";
import { ClientConfiguration } from "./client_configuration";
import { Account } from "./models/account";
import { AuthenticationToken } from "./models/authentication_token";
export declare class MySocialApp {
    private _client_configuration;
    private _appId;
    private _apiEndpoint;
    models: {
        AccessControl: typeof import("./models/access_control").AccessControl;
        Account: typeof Account;
        AccountEvents: typeof import("./models/account_events").AccountEvents;
        ActivityType: typeof import("./models/activity_type").ActivityType;
        AppPlatform: typeof import("./models/app_platform").AppPlatform;
        AuthenticationToken: typeof AuthenticationToken;
        Base: typeof import("./models/base").Base;
        BaseLocation: typeof import("./models/base_location").BaseLocation;
        BaseWall: typeof import("./models/base_wall").BaseWall;
        Comment: typeof import("./models/comment").Comment;
        CommentBlob: typeof import("./models/comment_blob").CommentBlob;
        CommentPost: typeof import("./models/comment_post").CommentPost;
        Conversation: typeof import("./models/conversation").Conversation;
        ConversationMessage: typeof import("./models/conversation_message").ConversationMessage;
        ConversationMessagePost: typeof import("./models/conversation_message_post").ConversationMessagePost;
        ConversationMessages: typeof import("./models/conversation_messages").ConversationMessages;
        CustomField: typeof import("./models/custom_field").CustomField;
        EntityType: typeof import("./models/entity_type").EntityType;
        Event: {
            new (typeArg: string, eventInitDict?: EventInit): Event;
            prototype: Event;
            readonly AT_TARGET: number;
            readonly BUBBLING_PHASE: number;
            readonly CAPTURING_PHASE: number;
            readonly NONE: number;
        };
        EventMember: typeof import("./models/event_member").EventMember;
        EventMemberAccessControl: typeof import("./models/event_member_access_control").EventMemberAccessControl;
        EventOptions: typeof import("./models/event_options").EventOptions;
        EventStatus: typeof import("./models/event_status").EventStatus;
        Feed: typeof import("./models/feed").Feed;
        FeedPost: typeof import("./models/feed_post").FeedPost;
        FileData: typeof import("./models/file").FileData;
        Flag: typeof import("./models/flag").Flag;
        FriendRequests: typeof import("./models/friend_requests").FriendRequests;
        Gender: typeof import("./models/gender").Gender;
        Group: typeof import("./models/group").Group;
        GroupMember: typeof import("./models/group_member").GroupMember;
        GroupMemberAccessControl: typeof import("./models/group_member_access_control").GroupMemberAccessControl;
        GroupStatus: typeof import("./models/group_status").GroupStatus;
        HashTag: typeof import("./models/hash_tag").HashTag;
        Like: typeof import("./models/like").Like;
        LikeBlob: typeof import("./models/like_blob").LikeBlob;
        Location: {
            new (): Location;
            prototype: Location;
        };
        LoginCredentials: typeof import("./models/login_credentials").LoginCredentials;
        Model: typeof import("./models/model").Model;
        Notification: {
            new (title: string, options?: NotificationOptions): Notification;
            prototype: Notification;
            readonly maxActions: number;
            readonly permission: NotificationPermission;
            requestPermission(deprecatedCallback?: NotificationPermissionCallback): Promise<NotificationPermission>;
        };
        NotificationAck: typeof import("./models/notification_ack").NotificationAck;
        Photo: typeof import("./models/photo").Photo;
        PhotoAlbum: typeof import("./models/photo_album").PhotoAlbum;
        PreviewNotification: typeof import("./models/preview_notification").PreviewNotification;
        ResetIdentifier: typeof import("./models/reset_identifier").ResetIdentifier;
        SearchQuery: typeof import("./models/search_query").SearchQuery;
        SearchResult: typeof import("./models/search_result").SearchResult;
        SearchResultTypes: typeof import("./models/search_result_types").SearchResultTypes;
        SearchResults: typeof import("./models/search_results").SearchResults;
        SearchType: typeof import("./models/search_type").SearchType;
        SimpleLocation: typeof import("./models/simple_location").SimpleLocation;
        SortOrder: typeof import("./models/sort_order").SortOrder;
        Status: typeof import("./models/status").Status;
        TagEntities: typeof import("./models/tag_entities").TagEntities;
        TagEntity: typeof import("./models/tag_entity").TagEntity;
        TagEntityAbstract: typeof import("./models/tag_entity_abstract").TagEntityAbstract;
        TextWallMessage: typeof import("./models/text_wall_message").TextWallMessage;
        URLTag: typeof import("./models/url_tag").URLTag;
        User: typeof import("./models/user").User;
        UserMentionTag: typeof import("./models/user_mention_tag").UserMentionTag;
        UserSettings: typeof import("./models/user_settings").UserSettings;
        UserStat: typeof import("./models/user_stat").UserStat;
    };
    constructor();
    setAppId(appId: string): MySocialApp;
    setAppEndpoint(endpoint: string): MySocialApp;
    setClientConfiguration(clientConfiguration: ClientConfiguration): MySocialApp;
    readonly configuration: Configuration;
    createAccount(email: string, password: string, firstName: string): Promise<Session>;
    createAccountFromBuilder(account: Account): Promise<Session>;
    connect(email: string, password: string): Promise<Session>;
    connectWithToken(token: string): Session;
    createSession(): Session;
    resetPassword(email: string): Promise<void>;
}
